@page "/"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.IdentityModel.Tokens
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Web.Models

@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore


<h1>Join session</h1>

@if (_existingSession != null)
{
    <p>You are already on a game, click here to rejoin</p>
    <MatButton OnClick="@Rejoin">Rejoin</MatButton>
}
<p></p>
<p><MatTextField @bind-Value="@_name" Label="Nickname"></MatTextField></p>
<p><MatTextField @bind-Value="@_sessionNumber" Label="Game id"></MatTextField></p>

@if (_sessionNotFound)
{
    <p>Session not found</p>
}


<MatButton OnClick="@Join">Join</MatButton>

@code {
    private int _sessionNumber = 0;
    private string _name = string.Empty;
    private bool _sessionNotFound;
    private SessionDto _existingSession;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
        if (state is null)
            return;

        var session = await SessionService.Get(state.SessionId);
        if (!session.IsFinished)
        {
            _existingSession = session;
            StateHasChanged();
        }
        
    }


    private void Rejoin()
    {
        NavigationManager.NavigateTo($"sessionlobby");
    }

    private async Task Join()
    {
        _sessionNotFound = false;
        var session = await SessionService.Get(_sessionNumber);
        if (session is null)
        {
            _sessionNotFound = true;
            return;
        }

        var player = await PlayerService.Create(_name, session.Id);

        var playerSessionState = new SessionPlayerState { SessionId = session.Id, PlayerId = player.Id, IsGameMaster = true };
        await ProtectedSessionStore.SetAsync("state", playerSessionState);


        NavigationManager.NavigateTo("sessionlobby");
    }
}