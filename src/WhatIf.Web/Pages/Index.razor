@page "/"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.IdentityModel.Tokens
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Web.Models

@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="container-index">
    <div id="bg"></div>
    <div id="header">
        <h1>What if?!</h1>
        <h5>The game that allows you to ask the real questions!</h5>
    </div>

    @if (_isLoading)
    {
        <div id="loading">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <div id="join">
            @if (_sessionToJoin is null && !_isCreatingSession)
            {
                <h3>Join</h3>
                <MatTextField TValue="string" OnInput="@(x => OnSessionNumberInput(x))" Outlined="true" Dense="true" OnKeyDown="@(async x => await OnSessionNumberKeyDown(x))" PlaceHolder="Game number" Icon="dialpad"></MatTextField>
                <MatButton OnClick="@Join" Icon="arrow_forward"></MatButton>
            }
            else
            {
                <h3>Enter nickname</h3>
                <MatTextField TValue="string" Outlined="true" OnInput="@(x => OnNicknameInput(x))" OnKeyDown="@(async x => await OnNameKeyDown(x))" Dense="true" PlaceHolder="Nickname" Icon="person_outline"></MatTextField>
                @if (_nameIsValid)
                {
                    <MatButton OnClick="@CreatePlayer" Icon="arrow_forward"></MatButton>
                }
                else
                {
                    <MatButton Disabled="true" Icon="arrow_forward"></MatButton>
                }
            }

            @if (_sessionNotFound)
            {
                <p>Session not found</p>
            }
        </div>

        @if (_existingSession != null)
        {
            <div id="rejoin">
                <h5>You are already in a game!</h5>
                <MatButton OnClick="@Rejoin">Rejoin</MatButton>
            </div>
        }

        @if (_sessionToJoin is null && !_isCreatingSession)
        {
            <div id="create">
                <MatButton OnClick="@CreateNew">Create new</MatButton>
            </div>
        }
        else
        {
            <div id="create">
                <MatButton OnClick="@UndoCreateSession" Icon="arrow_back"></MatButton>
            </div>
        }
    }
</div>





@code {

    private string _sessionNumber;
    private string _name = string.Empty;
    private bool _sessionNotFound;
    private SessionDto _existingSession;
    private SessionDto _sessionToJoin;
    private bool _nameIsValid;
    private bool _isCreatingSession;
    private bool _isLoading;

    public bool IsLoading
    {
        get => _isLoading;
        set { _isLoading = value; StateHasChanged(); }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        IsLoading = true;
        try
        {
            var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
            if (state is null)
                return;

            var session = await SessionService.Get(state.SessionId);
            if (session is null)
                return;

            if (!session.IsFinished)
            {
                _existingSession = session;
                StateHasChanged();
            }
        }
        finally
        {
            IsLoading = false;
        }
    }


    private void Rejoin()
    {
        NavigationManager.NavigateTo("sessionlobby");
    }

    private async Task Join()
    {
        _sessionNotFound = false;
        if (!int.TryParse(_sessionNumber, out var num))
        {
            _sessionNotFound = true;
            return;
        }
        IsLoading = true;
        try
        {
            _sessionToJoin = await SessionService.Get(num);
            if (_sessionToJoin is null)
            {
                _sessionNotFound = true;
                return;
            }
        }
        finally
        {

            IsLoading = false;
        }

    }

    private async Task CreatePlayer()
    {
        IsLoading = true;

        try
        {
            if (_isCreatingSession)
                _sessionToJoin = await SessionService.Create();

            var player = await PlayerService.Create(_name, _sessionToJoin.Id, _isCreatingSession);

            var playerSessionState = new SessionPlayerState { SessionId = _sessionToJoin.Id, PlayerId = player.Id, IsGameMaster = _isCreatingSession };
            await ProtectedSessionStore.SetAsync("state", playerSessionState);


            NavigationManager.NavigateTo("sessionlobby");
        }
        finally
        {
            _isLoading = false;
        }

    }

    private void CreateNew()
    {
        _isCreatingSession = true;
        _sessionNotFound = false;
        StateHasChanged();
    }


    private void UndoCreateSession()
    {
        _isCreatingSession = false;
        _sessionToJoin = null;
        StateHasChanged();
    }

    private void OnNicknameInput(ChangeEventArgs o)
    {
        _name = o.Value as string;
        var isValid = !string.IsNullOrWhiteSpace(_name);
        if (isValid == _nameIsValid)
            return;
        _nameIsValid = isValid;
        StateHasChanged();
    }

    private async Task OnNameKeyDown(KeyboardEventArgs o)
    {
        if (o.Key == "Enter" && _nameIsValid)
            await CreatePlayer();
    }

    private async Task OnSessionNumberKeyDown(KeyboardEventArgs o)
    {
        if (o.Key == "Enter")
            await Join();
    }

    private void OnSessionNumberInput(ChangeEventArgs o)
    {
        _sessionNumber = o.Value as string;
    }

}