@page "/game"
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Database.Services.Answers
@using WhatIf.Database.Services.Questions
@using WhatIf.Web.Components.Answers
@using WhatIf.Web.Components.Questions
@using WhatIf.Web.Helpers
@using WhatIf.Web.Models

@inject NavigationManager NavigationManager
@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject ISignalRConnectionBuilder SignalRConnectionBuilder
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IQuestionService QuestionService
@inject IAnswerService AnswerService

@implements IAsyncDisposable

@if (IsCreatingQuestions)
{
    <QuestionsCreator QuestionCount="@_session.CardAmount" OnSubmit="@(async x => await SubmitQuestions(x))"></QuestionsCreator>
}
else if (IsWaitingForOtherPlayers)
{
    <h3 class="mat-subtitle1">Waiting for remaining players</h3>
}
else if (IsAnsweringQuestions)
{
    <AnswersCreator PlayerId="@_player.Id" OnSubmit="@(async x => await SubmitAnswers(x))"></AnswersCreator>
}

else if (ShowReadingRound)
{
    <QuestionAnswersReader PlayerId="@_player.Id" Connection="@_connection"></QuestionAnswersReader>
}
else
{
    <h3 class="mat-subtitle1">Loading game</h3>
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}



@code{
    private readonly List<PlayerDto> _players = new List<PlayerDto>();

    private SessionDto _session;
    private PlayerDto _player;
    private HubConnection _connection;
    private bool _isLoading;
    private bool _isAnsweringQuestions;
    private bool _isCreatingQuestions;
    private bool _isWaitingForOtherPlayers;
    private bool _showReadingRound;

    public bool IsLoading
    {
        get => _isLoading;
        set { _isLoading = value; StateHasChanged(); }
    }

    public bool IsCreatingQuestions
    {
        get => _isCreatingQuestions;
        set { _isCreatingQuestions = value; StateHasChanged(); }
    }

    public bool IsAnsweringQuestions
    {
        get => _isAnsweringQuestions;
        set { _isAnsweringQuestions = value; StateHasChanged(); }
    }

    public bool IsWaitingForOtherPlayers
    {
        get => _isWaitingForOtherPlayers;
        set { _isWaitingForOtherPlayers = value; StateHasChanged(); }
    }

    public bool ShowReadingRound
    {
        get => _showReadingRound;
        set { _showReadingRound = value; StateHasChanged(); }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
            var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
            _player = await PlayerService.Get(state.PlayerId);
            _session = await SessionService.Get(state.SessionId);
            if (_session is null || _player is null)
            {
                NavigationManager.NavigateTo("error");
                return;
            }

            var playersInSession = await PlayerService.GetPlayersInSession(_session.Id);


            _players.AddRange(playersInSession);
            await ConnectToSignalRHub(_session.Id, _player.Id);
            IsCreatingQuestions = true;

        }
        finally
        {
            IsLoading = false;
        }
    }

    private async void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await _connection.InvokeAsync("LeaveGame", _session.Id, _player.Id);
    }

    private async Task ConnectToSignalRHub(Guid sessionId, Guid playerId)
    {
        _connection = SignalRConnectionBuilder.Build();
        _connection.On<Guid>("PlayerSubmittedQuestions", OnPlayerSubmittedQuestions);
        _connection.On<Guid>("PlayerSubmittedAnswers", OnPlayerSubmittedAnswers);
        _connection.On("StartAnsweringQuestions", OnStartAnsweringQuestions);
        _connection.On("ReadingRoundStart", OnReadingRoundStart);
        await _connection.StartAsync();

        await _connection.SendAsync("JoinGame", _session.Id, _player.Id);
    }

    private void OnReadingRoundStart()
    {
        IsAnsweringQuestions = false;
        ShowReadingRound = true;
    }

    private async Task OnPlayerSubmittedQuestions(Guid playerId)
    {
        var player = _players.First(x => x.Id == playerId);
        player.HasSubmittedQuestions = true;
        if (_players.All(x => x.HasSubmittedQuestions) && _player.IsGameMaster)
            await AssignQuestionsAndStartAnswering();
    }

    private async Task AssignQuestionsAndStartAnswering()
    {
        await QuestionService.AssignQuestions(_session.Id);
        await _connection.SendAsync("NotifyStartAnsweringQuestions", _session.Id);
    }

    private async Task OnPlayerSubmittedAnswers(Guid playerId)
    {
        var player = _players.First(x => x.Id == playerId);
        player.HasSubmittedQuestions = true;
        if (_players.All(x => x.HasSubmittedAnswers) && _player.IsGameMaster)
            await AssignAnswersAndQuestions();
    }

    private async Task AssignAnswersAndQuestions()
    {
        await AnswerService.AssignAnswersAndQuestions(_session.Id);
        await _connection.SendAsync("NotifyReadingRoundStart", _session.Id);
    }


    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
        await _connection.DisposeAsync();
    }

    private async Task SubmitQuestions(IEnumerable<CreateQuestionModel> questions)
    {
        IsCreatingQuestions = false;
        IsWaitingForOtherPlayers = true;
        await QuestionService.SubmitQuestions(_player.Id, questions.Select(x => x.Content).ToList());
        await _connection.SendAsync("NotifyPlayerSubmittedQuestions", _session.Id, _player.Id);
    }

    private async Task SubmitAnswers(IEnumerable<CreateAnswerModel> answers)
    {
        IsCreatingQuestions = false;
        IsWaitingForOtherPlayers = true;
        await AnswerService.SubmitAnswers(_player.Id, answers.Select(x => new SubmitAnswerRequest { Answer = x.Content, QuestionId = x.Question.Id }).ToList());
        await _connection.SendAsync("NotifyPlayerSubmittedAnswers", _session.Id, _player.Id);
    }

    private void OnStartAnsweringQuestions()
    {
        IsWaitingForOtherPlayers = false;
        IsAnsweringQuestions = true;
    }
}