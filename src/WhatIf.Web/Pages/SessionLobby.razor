@page "/sessionlobby"
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Web.Helpers
@using WhatIf.Web.Models

@inject NavigationManager NavigationManager
@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject ISignalRConnectionBuilder SignalRConnectionBuilder
@inject ProtectedSessionStorage ProtectedSessionStore

@implements IAsyncDisposable

<div class="container-lobby">
    @if (IsLoading)
    {
        <div class="loader">
        </div>
    }
    else
    {
        if (!(_players.FirstOrDefault(x => x.IsGameMaster) is { } gameMaster))
        {
            <div id="master-missing"></div>
            <h3>Game master has left the building.</h3>
            <h6>Wait for game master to rejoin or start a new round</h6>
        }
        else
        {
            <div id="header">
                <h2>Welcome @_player.Name!</h2>
                @if (!_player.IsGameMaster)
                {
                    <h5>Waiting for @gameMaster.Name to start the game</h5>
                }

            </div>
            <div id="pin">
                <h1>PIN: @_session.Number</h1>
            </div>
            @if (_player.IsGameMaster)
            {
                <div id="settings-master">
                    @if (_players.Count > 1)
                    {
                        <MatButton OnClick="@Start">Start</MatButton>
                    }
                    else
                    {
                        <p>Not enough players to start</p>
                    }

                    <div class="card-count-field">
                        <h5>Number of cards</h5>
                        <MatButton id="down" OnClick="@(x => CardAmount--)">-</MatButton>
                        <h4>@CardAmount</h4>
                        <MatButton id="up" OnClick="@(x => CardAmount++)">+</MatButton>
                    </div>
                </div>
            }
            else
            {
                <div id="settings-player">
                    <h5>Number of cards</h5>
                    <h4>@CardAmount</h4>
                </div>
            }

            <div id="player-list">
                <hr />
                <MatList>
                    @foreach (var player in _players)
                    {
                        <MatListItem>
                            @if (player.IsGameMaster)
                            {
                                <MatIcon Icon="star"></MatIcon>
                                <MatH6>@player.Name</MatH6>
                            }
                            else
                            {
                                <MatIcon Icon="person"></MatIcon>
                                <MatH6>@player.Name</MatH6>
                            }

                        </MatListItem>
                    }
                </MatList>
            </div>
        }

    }
</div>


@code{
    private readonly List<PlayerDto> _players = new List<PlayerDto>();

    private SessionDto _session;
    private PlayerDto _player;
    private HubConnection _connection;
    private bool _isLoading = true;
    private bool _isStarting;
    private int _cardAmount;
    private bool _disableCardAmountNotification;

    public bool IsLoading
    {
        get => _isLoading;
        set { _isLoading = value; StateHasChanged(); }
    }

    public bool IsStarting
    {
        get => _isStarting;
        set { _isStarting = value; StateHasChanged(); }
    }

    public int CardAmount
    {
        get => _cardAmount;
        set { _cardAmount = value; if (!_disableCardAmountNotification) HandleCardAmountChanged(); StateHasChanged(); }
    }

    public async Task Start()
    {
        IsStarting = true;
        await _connection.SendAsync("NotifySessionStarting", _session.Id);
        await SessionService.Start(_session.Id, CardAmount);
        await _connection.SendAsync("NotifySessionStarted", _session.Id);
        IsStarting = false;
        NavigationManager.NavigateTo("game");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        IsLoading = true;
        try
        {
            var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
            if (state is null)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            _player = await PlayerService.Get(state.PlayerId);
            _session = await SessionService.Get(state.SessionId);
            if (_player is null || _session is null || _session.IsFinished)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            SetCardAmountWithoutNotification(_session.CardAmount);

            if (_session.IsFinished)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            if (_session.StartTime > default(DateTimeOffset))
            {
                NavigationManager.NavigateTo("game");
                return;
            }

            var playersInSession = await PlayerService.GetPlayersInSession(_session.Id);

            _players.AddRange(playersInSession);
            await ConnectToSignalRHub(_session.Id, _player.Id);
            NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        }
        finally
        {
            IsLoading = false;
        }

    }

    private async void HandleCardAmountChanged()
    {
        if (_connection != null)
            await _connection.SendAsync("NotifyCardAmountChanged", _session.Id, CardAmount);
        await SessionService.SetCardAmount(_session.Id, CardAmount);
    }

    private async void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (_connection is null || _session is null || _player is null)
            return;
        await _connection.InvokeAsync("LeaveGame", _session.Id, _player.Id);
    }

    private async Task ConnectToSignalRHub(Guid sessionId, Guid playerId)
    {
        _connection = await SignalRConnectionBuilder.Build();

        _connection.On<Guid>("PlayerJoined", OnPlayerJoined);
        _connection.On<Guid>("PlayerLeft", OnPlayerLeft);
        _connection.On("SessionStarting", OnSessionStarting);
        _connection.On("SessionStarted", OnSessionStarted);
        _connection.On<int>("CardAmountChanged", SetCardAmountWithoutNotification);
        await _connection.StartAsync();

        await _connection.InvokeAsync("JoinGame", sessionId, playerId); // Invoke a method on the server called "ServerMethod" and pass parameters to it.
    }

    private void SetCardAmountWithoutNotification(int cardAmount)
    {
        _disableCardAmountNotification = true;
        CardAmount = cardAmount;
        _disableCardAmountNotification = false;
    }

    private void OnSessionStarting()
    {
        IsStarting = true;
    }

    private void OnSessionStarted()
    {
        IsStarting = false;
        NavigationManager.NavigateTo("game");
    }

    private void OnPlayerLeft(Guid playerId)
    {
        var player = _players.FirstOrDefault(x => x.Id == playerId);
        if (player is null)
            return;

        _players.Remove(player);
        StateHasChanged();
    }

    private async Task OnPlayerJoined(Guid playerId)
    {
        if (_players.Any(x => x.Id == playerId))
            return;

        var player = await PlayerService.Get(playerId);
        _players.Add(player);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
        await _connection.DisposeAsync();
    }

}