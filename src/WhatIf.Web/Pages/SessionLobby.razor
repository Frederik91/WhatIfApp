@page "/sessionlobby"
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Web.Helpers
@using WhatIf.Web.Models

@inject NavigationManager NavigationManager
@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject ISignalRConnectionBuilder SignalRConnectionBuilder
@inject ProtectedSessionStorage ProtectedSessionStore

@implements IAsyncDisposable

@if (_player is null || _session is null)
{
<h3 class="mat-subtitle1">Joining session</h3>
<MatProgressBar Progress="@Progress"></MatProgressBar>
}
else
{
@if (IsStarting)
    {
<h3 class="mat-subtitle1">Game is starting</h3>
<MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
<h1>Game @_session.Number</h1>
<h2>Welcome @_player.Name. Waiting for @_session.Name to start</h2>

    @if (_player.IsGameMaster)
    {
        @if (_players.Count > 1)
        {
            <MatButton OnClick="@Start">Start</MatButton>
        }
        else
        {
            <h3>Not enough players to start</h3>
        }
        <p>
            <MatNumericUpDownField Label="Card amount"
                                   @bind-Value=@CardAmount
                                   DecimalPlaces=0
                                   Minimum=1 Maximum=10>
            </MatNumericUpDownField>
        </p>
        }
        else
        {
<h6 class="mat-h6">Card amount: @CardAmount</h6>
        }

<h4>Players in lobby</h4>
<MatList>
    @foreach (var player in _players)
            {
    <MatListItem>
        @if (player.IsGameMaster)
                    {
        <MatH6 style="font-weight: bold">@player.Name (Game master)</MatH6>
                    }
                    else
                    {
        <MatH6>@player.Name</MatH6>
                    }

    </MatListItem>
            }
</MatList>
    }

}



@code{
    private readonly List<PlayerDto> _players = new List<PlayerDto>();

    private SessionDto _session;
    private PlayerDto _player;
    private HubConnection _connection;
    private bool _isLoading;
    private double _progress;
    private bool _isStarting;
    private int _cardAmount;
    private bool _disableCardAmountNotification;

    public bool IsLoading
    {
        get => _isLoading;
        set { _isLoading = value; StateHasChanged(); }
    }

    public double Progress
    {
        get => _progress;
        set { _progress = value; StateHasChanged(); }
    }

    public bool IsStarting
    {
        get => _isStarting;
        set { _isStarting = value; StateHasChanged(); }
    }

    public int CardAmount
    {
        get => _cardAmount;
        set { _cardAmount = value; if (!_disableCardAmountNotification) HandleCardAmountChanged(); StateHasChanged(); }
    }

    public async Task Start()
    {
        IsStarting = true;
        await _connection.SendAsync("NotifySessionStarting", _session.Id);
        await SessionService.Start(_session.Id, CardAmount);
        await _connection.SendAsync("NotifySessionStarted", _session.Id);
        IsStarting = false;
        NavigationManager.NavigateTo("game");
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        Progress = 0;
        try
        {
            NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
            var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
            if (state is null)
            {
                NavigationManager.NavigateTo("(/");
                return;
            }


            Progress = 0.2;
            _player = await PlayerService.Get(state.PlayerId);
            Progress = 0.4;
            _session = await SessionService.Get(state.SessionId);
            if (_player is null || _session is null || _session.IsFinished)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            Progress = 0.6;
            SetCardAmountWithoutNotification(_session.CardAmount);

            if (_session.IsFinished)
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            if (_session.StartTime > default(DateTimeOffset))
            {
                NavigationManager.NavigateTo("game");
                return;
            }

            var playersInSession = await PlayerService.GetPlayersInSession(_session.Id);
            Progress = 0.8;

            _players.AddRange(playersInSession);
            await ConnectToSignalRHub(_session.Id, _player.Id);
        }
        finally
        {
            IsLoading = false;
        }

    }

    private async void HandleCardAmountChanged()
    {
        if (_connection != null)
            await _connection.SendAsync("NotifyCardAmountChanged", _session.Id, CardAmount);
    }

    private async void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (_connection is null || _session is null || _player is null)
            return;
        await _connection.InvokeAsync("LeaveGame", _session.Id, _player.Id);
    }

    private async Task ConnectToSignalRHub(Guid sessionId, Guid playerId)
    {
        _connection = SignalRConnectionBuilder.Build();

        _connection.On<Guid>("PlayerJoined", OnPlayerJoined);
        _connection.On<Guid>("PlayerLeft", OnPlayerLeft);
        _connection.On("SessionStarting", OnSessionStarting);
        _connection.On("SessionStarted", OnSessionStarted);
        _connection.On<int>("CardAmountChanged", SetCardAmountWithoutNotification);
        await _connection.StartAsync();

        await _connection.InvokeAsync("JoinGame", sessionId, playerId); // Invoke a method on the server called "ServerMethod" and pass parameters to it.
    }

    private void SetCardAmountWithoutNotification(int cardAmount)
    {
        _disableCardAmountNotification = true;
        CardAmount = cardAmount;
        _disableCardAmountNotification = false;
    }

    private void OnSessionStarting()
    {
        IsStarting = true;
    }

    private void OnSessionStarted()
    {
        IsStarting = false;
        NavigationManager.NavigateTo("game");
    }

    private void OnPlayerLeft(Guid playerId)
    {
        var player = _players.FirstOrDefault(x => x.Id == playerId);
        if (player is null)
            return;

        _players.Remove(player);
        StateHasChanged();
    }

    private async Task OnPlayerJoined(Guid playerId)
    {
        var player = await PlayerService.Get(playerId);
        _players.Add(player);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
        await _connection.DisposeAsync();
    }

}