@page "/sessionlobby"
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using WhatIf.Core.Models
@using WhatIf.Core.Services
@using WhatIf.Web.Helpers
@using WhatIf.Web.Models

@inject NavigationManager NavigationManager
@inject IPlayerService PlayerService
@inject ISessionService SessionService
@inject ISignalRConnectionBuilder SignalRConnectionBuilder
@inject ProtectedSessionStorage ProtectedSessionStore

@implements IDisposable

@if (_player is null || _session is null)
{
    <h1>Loading...</h1>
}
else
{
    <h1>Game @_session.Number</h1>
    <h2>Welcome @_player.Name. Waiting for @_session.Name to start</h2>

    <MatList>
        @foreach (var player in _players)
        {
            <MatListItem>
                @player.Name
            </MatListItem>
        }
    </MatList>
}



@code{
    private readonly List<PlayerDto> _players = new List<PlayerDto>();

    private SessionDto _session;
    private PlayerDto _player;
    private HubConnection _connection;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
        var state = await ProtectedSessionStore.GetAsync<SessionPlayerState>("state");
        _player = await PlayerService.Get(state.PlayerId);
        _session = await SessionService.Get(state.SessionId);
        if (_session is null || _player is null)
        {
            NavigationManager.NavigateTo("error");
            return;
        }

        _players.Add(_player);
        await ConnectToSignalRHub(_session.Id, _player.Id);
    }

    private async void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await _connection.InvokeAsync("LeaveGame", _session.Id, _player.Id);
    }

    private async Task ConnectToSignalRHub(Guid sessionId, Guid playerId)
    {
        _connection = SignalRConnectionBuilder.Build(NavigationManager.BaseUri);

        _connection.On<Guid>("PlayerJoined", HandlePlayerJoined);
        _connection.On<Guid>("PlayerLeft", HandlePlayerLeft);
        await _connection.StartAsync();

        await _connection.InvokeAsync("JoinGame", sessionId, playerId); // Invoke a method on the server called "ServerMethod" and pass parameters to it.
    }

    private void HandlePlayerLeft(Guid playerId)
    {
        var player = _players.FirstOrDefault(x => x.Id == playerId);
        if (player is null)
            return;

        _players.Remove(player);
        StateHasChanged();
    }

    private async Task HandlePlayerJoined(Guid playerId)
    {
        var player = await PlayerService.Get(playerId);
        _players.Add(player);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}