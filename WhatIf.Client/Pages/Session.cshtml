@page "/session/{SessionId:int}"
@using Blazor.Extensions
@using WhatIf.Shared.Services.Session
@using WhatIf.Shared.Services.User
@using System.Linq
@inject ISessionClient SessionClient
@inject IUserClient UserClient
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<div class="container">
    <div class="row">
        <div class="col">
            <h1 class="display-4">Velkommen til @SessionResult?.Name, @User?.Nickname</h1>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h1>Id: @SessionId</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-center">
            @if (IsLeader())
            {
                <button class="btn btn-primary" onclick="@StartSession">Start runden</button>
            }
            else
            {
                <p class="lead">Venter på at @SessionLeader?.Nickname skal starte runden</p>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h2>Spillere:</h2>
            <ul style="list-style-type: none; margin-top: 10px">
                @if (Players != null)
                {
                    foreach (var player in Players)
                    {
                        <li>@player.Nickname</li>
                    }
                }
                else
                {
                    <li>Ingen spillere er med i runden så langt</li>
                }
            </ul>
        </div>
    </div>
</div>

@functions {
    [Parameter]
    protected int SessionId { get; set; }

    [Parameter]
    protected SessionResult SessionResult { get; set; }

    [Parameter]
    protected UserResult SessionLeader { get; set; }

    [Parameter]
    protected UserResult User { get; set; }

    [Parameter]
    protected List<UserResult> Players { get; set; }

    protected override async Task OnInitAsync()
    {
        User = SessionSettings.User;
        if (User == null)
        {
            UriHelper.NavigateTo("/JoinSession");
            return;
        }

        SessionResult = await SessionClient.Get(SessionId);
        SessionLeader = await UserClient.GetUser(SessionResult.LeaderId);

        var connection = new HubConnectionBuilder().WithUrl("/SessionHub").Build();
        connection.On<Guid>("UserJoined", async id => await UpdatePlayerList());
        await connection.StartAsync();
        await connection.InvokeAsync("RegisterUser", new { sessionId = SessionResult.Id, userId = User.Id });
    }

    private async Task UpdatePlayerList()
    {
        Players = (await UserClient.GetUsers(SessionResult.Id)).ToList();
    }

    private bool IsLeader()
    {
        return User?.Id == SessionLeader?.Id;
    }

    private async Task StartSession()
    {
        await SessionClient.StartSession(SessionResult.Id);
    }
}
